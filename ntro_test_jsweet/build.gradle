plugins {
    id 'local-java-plugin'
    id 'local-jsweet-plugin'
}

project.group = 'ca.ntro'
project.version = '0.1'

dependencies {

    implementation project(':ntro_core')
    implementation group: 'ca.ntro', name: 'ntro_core', version: '0.1'

    implementation project(':ntro_jsweet')
    implementation group: 'ca.ntro', name: 'ntro_jsweet', version: '0.1'

    implementation project(':ntro_test')
    implementation group: 'ca.ntro', name: 'ntro_test', version: '0.1'

	// XXX: must be 'compile' and not 'implementation'
    compile group: 'org.jsweet.candies.ext', name: 'jquery', version: "1.10.0-SNAPSHOT"
}


tasks.jsweet{

    dependsOn ':ntro_core:jsweet'
    dependsOn ':ntro_jsweet:jsweet'
    dependsOn ':ntro_test:jsweet'

    // FIXME: move this to the local-jsweet-plugin
    //        i.e. by declaring a local-jsweet-plugin.includedProjects to iterate over
    inputs.dir("${System.getProperty('user.home')}/.m2/repository/ca/ntro/ntro_core") 
    inputs.dir("${System.getProperty('user.home')}/.m2/repository/ca/ntro/ntro_jsweet") 
    inputs.dir("${System.getProperty('user.home')}/.m2/repository/ca/ntro/ntro_test") 

    // FIXME: same as above FIXME
    doLast{
        def serverProject = project(':ntro_test_server')
        def projectPaths = [':ntro_core',':ntro_jsweet',':ntro_test',':ntro_test_jsweet']
        for (projectPath in projectPaths){
            def aProject = project(projectPath)
            def outDir = new File("${serverProject.projectDir}/src/main/resources/public/js/${aProject.name}")
            outDir.mkdirs()

            def srcDir = new File("${aProject.projectDir}/jsweet/jsOut/META-INF/resources/webjars/${aProject.name}/${aProject.version}")

            copyLargeDir(srcDir, outDir, true)
        }
    }
}

// adapted from  https://stackoverflow.com/questions/6214703/copy-entire-directory-contents-to-another-directory
def copyLargeDir(File dirFrom, File dirTo, boolean excludeHiddenFiles){
    if (!dirTo.exists()){
        dirTo.mkdir();
    }

    dirFrom.eachFile(groovy.io.FileType.FILES){File source ->
        if(!excludeHiddenFiles || !source.getName().startsWith(".")){
            File target = new File(dirTo,source.getName());
            target.bytes = source.bytes;
        }
    }

    dirFrom.eachFile(groovy.io.FileType.DIRECTORIES){File source ->
        File target = new File(dirTo,source.getName());
        copyLargeDir(source, target, excludeHiddenFiles)
    }
}

